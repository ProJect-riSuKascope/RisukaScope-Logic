'''
    frbm_src_gen.py
    AHB FRBM Source Generator
'''
import sys, getopt, time, re, subprocess

HELP_MESSAGE = '''FRBM source generator
Usage: python GraphicCompiler.py -i <input_file> -o <output_file> [-c <compiled_file>]'''

FRBM_COMPILER = '../infrastructure/commerical/cmsdk_ahb_fileread_masters/bin/fm2conv.pl'

DEST_RE = r';\s*INSERT S VEC (\S*) HERE'

if __name__ == '__main__':
    # Parse the arguments
    opts, args = getopt.getopt(sys.argv[1:], "hc:i:o:")

    compile_dest = None

    for opt,val in opts:
        if opt == '-i':
            input_file = val
        elif opt == '-o':
            output_file = val
        elif opt == '-c':
            compile_dest = val
        else:
            print(HELP_MESSAGE)
            sys.exit()

    data = []
    with open(input_file, 'r', encoding = 'utf-8') as f:
        data = f.readlines()

        for i in range(len(data)):
            if i % 256 == 0:
                data.insert(i, 'W 0x00040000 0x00000000 word incr P0000 nolock okay\n')

        # Convert to FRBM S vectors
        data.insert(0, f'\n; Generated by AHB FRBM source generator\n; Time: {time.asctime( time.localtime(time.time()) )} \n; Python: {sys.version}\n')
        data = 'S 0x'.join(data)

    with open(output_file, 'r+', encoding = 'utf-8') as f:
        dst = f.read()

        # Match insert flag
        for v in re.finditer(DEST_RE, dst):
            startpos = v.end() + 1
            dest_found = v.group(1)
        
            print(dest_found)
            
            if dest_found == input_file:
                dst = dst[0:startpos - 1] + data + dst[startpos:]
                break

        f.seek(0)
        f.write(dst)

    # Compile the file
    if not compile_dest is None:
        result = subprocess.getoutput(f'perl {FRBM_COMPILER} -busWidth 32 -infile {output_file} -outfile {compile_dest}')
        print(result)